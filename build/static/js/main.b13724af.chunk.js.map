{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["$","window","arr","i","push","fixCenter","el","find","remove","wrapWidth","width","elChildren","children","len","length","item","itemWidth","itemHeight","height","itemMarginTop","parseInt","css","boxWidth","boxHeight","size","Math","floor","lastRowSize","needAdd","fixBox","fixDom","j","append","resize","e","App","useEffect","className","map","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAKA,I,oCAHIA,G,UAAIC,OAAOD,GACXE,EAAM,GAEDC,EAAI,EAAGA,EADN,GACeA,IACrBD,EAAIE,KAAKD,GAEb,IAAIE,EAAY,WACZ,IAAIC,EAAKN,EAAE,eACXM,EAAGC,KAAK,aAAaC,SACrB,IAAIC,EAAYH,EAAGI,QACfC,EAAaL,EAAGM,WAChBC,EAAMF,EAAWG,OACjBC,EAAOf,EAAEW,EAAW,IACpBK,EAAYD,EAAKL,QACjBO,EAAaF,EAAKG,SAClBC,EAAgBC,SAASL,EAAKM,IAAI,aAAc,IAEhDC,EAAWN,EADMI,SAASL,EAAKM,IAAI,cAAe,IAElDE,EAAYN,EAAaE,EAEzBK,EAAOC,KAAKC,MAAMjB,EAAYa,GAE9BK,EAAcd,EAAMW,EACxB,GAAIG,EAAa,CAUb,IARA,IAAIC,EAAUJ,EAAOG,EACjBE,EACA,sCACAP,EACA,aACAC,EACA,uDACAO,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAASG,IACzBD,GAAUD,EAEdvB,EAAG0B,OAAOF,KAGlB9B,EAAEC,QAAQgC,QAAO,SAASC,GACtB7B,OAmBW8B,MAjBf,WAII,OAHAC,qBAAU,WACN/B,OAGA,yBAAKgC,UAAU,OACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,2BACVnC,EAAIoC,KAAI,SAAAvB,GAAI,OACT,yBAAKsB,UAAU,OAAOE,IAAKxB,WCzC/ByB,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b13724af.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\nlet $ = window.$;\nlet arr = [];\nlet len = 13;\nfor (let i = 0; i < len; i++) {\n    arr.push(i);\n}\nlet fixCenter = function() {\n    let el = $(\".fix-center\");\n    el.find(\".fix-item\").remove();\n    let wrapWidth = el.width();\n    let elChildren = el.children();\n    let len = elChildren.length;\n    let item = $(elChildren[0]);\n    let itemWidth = item.width();\n    let itemHeight = item.height();\n    let itemMarginTop = parseInt(item.css(\"marginTop\"), 10);\n    let itemMarginLeft = parseInt(item.css(\"marginLeft\"), 10);\n    let boxWidth = itemWidth + itemMarginLeft;\n    let boxHeight = itemHeight + itemMarginTop;\n    // 每一行有几个\n    let size = Math.floor(wrapWidth / boxWidth);\n    // 最后一行有几个\n    let lastRowSize = len % size;\n    if (lastRowSize) {\n        // 需要添加多少个\n        let needAdd = size - lastRowSize;\n        let fixBox =\n            '<div class=\"fix-item\" style=\"width:' +\n            boxWidth +\n            \"px;height:\" +\n            boxHeight +\n            'px;display: inline-block;visibility: hidden;\"></div>';\n        let fixDom = \"\";\n        for (let j = 0; j < needAdd; j++) {\n            fixDom += fixBox;\n        }\n        el.append(fixDom);\n    }\n};\n$(window).resize(function(e) {\n    fixCenter();\n});\nfunction App() {\n    useEffect(() => {\n        fixCenter();\n    });\n    return (\n        <div className=\"App\">\n            <div className=\"wrap\">\n                <div className=\"wrap-content fix-center\">\n                    {arr.map(item => (\n                        <div className=\"card\" key={item}></div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}